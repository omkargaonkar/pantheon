<?php
/**
 * @file
 * The Anonymous Subscriptions module allows a non-registered user to your site
 * the ability to register for email notifications to certain pre-defined content types.
 *
 * These notifications are optional on the pre-defined content types with a flag
 * displayed as to whether to send e-mails or not.
 *
 * There is currently only one subscription list per site, future functionality will add
 * the ability for users to subscribe per content type, and/or per node.
 *
 */

define('ANONYMOUS_SUBSCRIPTIONS_TABLE', 'anonymous_subscriptions_emails');
define('ANONYMOUS_SUBSCRIPTIONS_MODULE_NAME', 'anonymous_subscription');
define('ANONYMOUS_SUBSCRIPTIONS_QUEUE_NAME', 'anonymous_subscriptions_queue');
define('ANONYMOUS_SUBSCRIPTIONS_VALID_TYPES', 'anonymous_subscriptions_node_types');

require('includes/anonymous_subscriptions.block.inc');
/**
 * Implements hook_permission().
 */
function anonymous_subscriptions_permission() {
  return array(
    'administer anonymous_subscriptions' => array(
      'description' => t('Configure the subscription settings.'),
      'title' => t('Administer subscription Settings'),
    ),
    'alter anonymous_subscriptions' => array(
      'description' => t('Change subscription settings on node form.'),
      'title' => t('Change subscription settings on node form'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function anonymous_subscriptions_help($path, $arg) {
  switch ($path) {
    case 'admin/help#anonymous_subscriptions':
      return '<p>' . t('Anonymous Subscriptions allows anonymous visitors to your site to subscribe to updates to nodes. The <a href="@anon">anonymous subscriptions administration page</a> allows you to configure options including whether emails need to be verified and which content types the option should appear to send notifications for.', array('@anon' => url('admin/config/content/anonymous_subscriptions'))) . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function anonymous_subscriptions_menu() {
  $items = array();

  $items['admin/config/content/anonymous_subscriptions'] = array(
    'title' => t('Anonymous subscriptions'),
    'description' => t('Subscription integration settings and configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('anonymous_subscriptions_settings'),
    'access arguments' => array('administer anonymous_subscriptions'),
    'file' => 'includes/anonymous_subscriptions.admin.inc',
  );

  $items['admin/config/content/anonymous_subscriptions/settings'] = array(
    'title' => t('Settings'),
    'weight' => -11,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/content/anonymous_subscriptions/import'] = array(
    'title' => t('Import'),
    'description' => t('Import bulk emails for subscriptions'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('anonymous_subscriptions_import'),
    'access arguments' => array('administer anonymous_subscriptions'),
    'file' => 'includes/anonymous_subscriptions.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10
  );

  $items['subscription/%node/remove'] = array(
    'page callback' => '_anonymous_subscriptions_remove_pending',
    'page arguments' => array(1),
    'access callback' => '_anonymous_subscriptions_token_check',
  );

  $items['subscription/%/removeitem'] = array(
    'page callback' => '_anonymous_subscriptions_remove_pending_item',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('administer anonymous_subscriptions'),
  );

  $items['subscription/%/%/verify'] = array(
    'page callback' => '_anonymous_subscriptions_verify_email',
    'page arguments' => array(1, 2),
    'access arguments' => array(1, 2),
    'access callback' => '_anonymous_subscriptions_verify_email_check',
  );

  $items['subscription/%/%/unsubscribe'] = array(
    'page callback' => '_anonymous_subscriptions_unsubscribe',
    'page arguments' => array(1, 2),
    'access arguments' => array(1, 2),
    'access callback' => '_anonymous_subscriptions_verify_email_check',
  );

  $items['subscription/%/%/%/verify'] = array(
    'page callback' => '_anonymous_subscriptions_verify_email_admin',
    'page arguments' => array(1, 2, 3),
    'access arguments' => array('administer anonymous_subscriptions'),
    'access callback' => 'user_access',
  );

  $items['subscription/%/unsubscribe'] = array(
    'page callback' => '_anonymous_subscriptions_unsubscribe_admin',
    'page arguments' => array(1),
    'access arguments' => array('administer anonymous_subscriptions'),
    'access callback' => 'user_access',
  );

  return $items;
}

/**
 * Custom access callback
 */
function _anonymous_subscriptions_token_check() {
  if (!user_access('alter anonymous_subscriptions') && empty($_GET['tok']) || !drupal_valid_token($_GET['tok'])) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Function called to remove pending emails from the
 * queue.
 *
 * @param $node
 * The node associated with the removal of pending emails.
 *
 */
function _anonymous_subscriptions_remove_pending($node) {
  $queue = DrupalQueue::get(ANONYMOUS_SUBSCRIPTIONS_QUEUE_NAME);
  $count = 0;
  while($item = $queue->claimItem()) {
    $email = $item->data;
    if($email['nid'] == $node->nid) {
      // Log some information in case we need to verify that an email was sent then send the email.
      $log_text = t("Removing email to !email with subject !subject", ['!email' => $email['email'], '!subject' => $email['subject']]);
      watchdog(ANONYMOUS_SUBSCRIPTIONS_MODULE_NAME, $log_text, NULL, WATCHDOG_INFO, NULL);

      $queue->deleteItem($item);
      $count++;
    }
  }

  drupal_set_message("Removed $count pending subscriptions.");
  drupal_goto("/node/$node->nid");
}

/**
 * Function used to remove individual items from the queue.
 *
 * @param $item_id The Queue ID of the item to remove
 */
function _anonymous_subscriptions_remove_pending_item($item_id) {
  db_delete('queue')
    ->condition('item_id', $item_id)
    ->execute();

  drupal_set_message(t('Item !item_id deleted.', ['!item_id' => $item_id]));
  drupal_goto('admin/reports/anonymous_subscriptions_pending_emails');
}

/**
 * Function called to check if a code and email are valid
 * entries in the database.
 *
 * @param $code
 *  The verification code used to verify a user
 * @param $email
 *  The email address of the user
 * @return bool
 * Returns TRUE if a valid code and email combination, else FALSE.
 */
function _anonymous_subscriptions_verify_email_check($code, $email) {
  $result = db_select(ANONYMOUS_SUBSCRIPTIONS_TABLE, 's')
    ->fields('s')
    ->condition('email', trim($email),'=')
    ->condition('code', trim($code),'=')
    ->execute()
    ->fetchAssoc();

  if($result) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Function called when the verify link is selected.
 * Changes verified status from 0 to 1 allowing that user
 * to be sent subscription notifications.
 *
 * @param $code
 *  The verification code used to verify a user
 * @param $email
 *  The email address of the user
 *
 */
function _anonymous_subscriptions_verify_email($code, $email) {
  global $base_url;
  $original_base_url = $base_url;
  $site_url = variable_get('anonymous_subscriptions_site_url', '[site:url]');
  $base_url = token_replace($site_url);

  // If the result matches, update the email address to be verified
  db_update(ANONYMOUS_SUBSCRIPTIONS_TABLE)
    ->fields(array(
      'verified' => 1,
    ))
    ->condition('email', trim($email), '=')
    ->execute();

  // Send out another email informing the user that they are not verified.
  $subject = variable_get('site_name', '[site:name]').' - subscription';
  $text = t("You are now subscribed to receive updates from !base_url.  To unsubscribe please visit !url", ['!base_url' => url($base_url),'!url' => url("subscription/$code/$email/unsubscribe", ['absolute' => TRUE])]);
  $body = array($text);
  $params = array(
    'email' => $email,
    'subject' => $subject,
    'body' => $body
  );
  drupal_mail('anonymous_subscriptions', 'anonymous_subscriptions_key', $email, language_default(), $params);

  // Setting base URL back to the original as to ensure we get the correct url (after token replacing etc)
  // for our $site_url variable, e.g. if node:url is used we want the correct base_url
  $base_url = $original_base_url;
  return theme('anonymous_subscriptions_message', array('title' => 'Subscription verified', 'message' => 'Your email has been verified, you will now receive updates.', 'url' => url('<front>')));
}


/**
 * Function called when a user is unsubscribing.
 *
 * @param $code
 *  The verification code used to verify a user
 * @param $email
 *  The email address of the user
 */
function _anonymous_subscriptions_unsubscribe($code, $email) {
  // If details are correct then remove the email from the database
  db_delete(ANONYMOUS_SUBSCRIPTIONS_TABLE)
    ->condition('email', trim($email))
    ->execute();

  // Redirect to homepage
  return theme('anonymous_subscriptions_message', array('title' => 'Subscription removed', 'message' => 'You have been unsubscribed from updates.', 'url' => url('<front>')));
}


/**
 * Function called to verify via the admin report.
 *
 * @param $eid
 * The Email ID
 * @param $code
 *  The verification code used to verify a user
 * @param $email
 *  The email address of the user
 *
 */
function _anonymous_subscriptions_verify_email_admin($eid, $email, $code) {
  global $base_url;
  $original_base_url = $base_url;
  $site_url = variable_get('anonymous_subscriptions_site_url', '[site:url]');
  $base_url = token_replace($site_url);

  // If the result matches, update the email address to be verified
  db_update(ANONYMOUS_SUBSCRIPTIONS_TABLE)
    ->fields(array(
      'verified' => 1,
    ))
    ->condition('eid', $eid, '=')
    ->execute();

  // Send out another email informing the user that they are not verified.
  $subject = variable_get('site_name', '[site:name]').' - subscription';
  $text = t("You are now subscribed to receive updates from !base_url.  To unsubscribe please visit !url", ['!base_url' => url($base_url),'!url' => url("subscription/$code/$email/unsubscribe", ['absolute' => TRUE])]);
  $body = array($text);
  $params = array(
    'email' => $email,
    'subject' => $subject,
    'body' => $body
  );
  drupal_mail('anonymous_subscriptions', 'anonymous_subscriptions_key', $email, language_default(), $params);

  // Setting base URL back to the original as to ensure we get the correct url (after token replacing etc)
  // for our $site_url variable, e.g. if node:url is used we want the correct base_url
  $base_url = $original_base_url;
  drupal_set_message(t('Subscription for !email verified', ['!email' => $email]));
  drupal_goto('admin/reports/anonymous_subscriptions_emails');
}


/**
 * Function called when a user is unsubscribing.
 *
 * @param $eid
 * The Email ID
 */
function _anonymous_subscriptions_unsubscribe_admin($eid) {
  // If details are correct then remove the email from the database
  db_delete(ANONYMOUS_SUBSCRIPTIONS_TABLE)
    ->condition('eid', $eid)
    ->execute();

  drupal_set_message(t('Subscription with ID !eid subscription removed.', ['!eid' => $eid]));
  drupal_goto('admin/reports/anonymous_subscriptions_emails');
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 *
 * This is used to display the checkbox as to whether or not send the notification
 * for this particular node.
 */
function anonymous_subscriptions_form_node_form_alter(&$form, $form_state, $form_id) {
  $type = $form['type']['#value'];
  $valid_types = variable_get(ANONYMOUS_SUBSCRIPTIONS_VALID_TYPES, array());
  if(in_array($type, $valid_types)) {
    $form['options']['send_emails'] = array(
      '#type' => 'checkbox',
      '#title' => t('Send e-mails to subscribers'),
      '#default_value' => variable_get('anonymous_subscriptions_send_default', FALSE),
      '#access' => user_access('alter anonymous_subscriptions') || user_access('administer anonymous_subscriptions'),
    );
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 *
 * This is used to display the checkbox as to whether or not send the notification
 * for this particular node on the workbench block.
 */
function anonymous_subscriptions_form_workbench_moderation_moderate_form_alter(&$form, $form_state, $form_id) {
  $node = $form['node']['#value'];
  $type = $node->type;
  $valid_types = variable_get(ANONYMOUS_SUBSCRIPTIONS_VALID_TYPES, array());
  if(in_array($type, $valid_types)) {
    $form['send_emails'] = array(
      '#type' => 'checkbox',
      '#title' => t('Send emails to subscribers'),
      '#default_value' => variable_get('anonymous_subscriptions_send_default', FALSE),
      '#access' => user_access('alter anonymous_subscriptions') || user_access('administer anonymous_subscriptions'),
      '#states' => array(
        'visible' => array(
          'select[name="state"]' => array('value' => 'published'),
        ),
      ),
    );

    $form['#submit'][] = 'anonymous_subscriptions_workbench_moderation_form_submit';
  }
}

/**
 * Implements hook_node_insert().
 */
function anonymous_subscriptions_node_insert($node) {
  anonymous_subscriptions_node_update($node);
}

/**
 * Implements hook_node_update().
 */
function anonymous_subscriptions_node_update($node) {
  if(_anonymous_subscriptions_should_send($node)) {
    _anonymous_subscriptions_add_pending_emails($node);
  }
}

/**
 * Implements hook_workbench_moderation_transition().
 *
 * Workbench is its own little thing of beauty so it needs
 * its own special implementation.
 * In here we get the value from our form, then add it to the fresh node_load
 * object, then continue with how we would normally check to send emails.
 */
function anonymous_subscriptions_workbench_moderation_form_submit(&$form, &$form_state) {
  $send_email = $form['send_emails']['#value'];
  $to_state = $form['state']['#value'];
  $nid = $form['node']['#value']->nid;
  $node = node_load($nid);
  $node->send_emails = $send_email;
  if(workbench_moderation_state_published() == $to_state) {
    //Set the node status to published so our subscription checker sees this as published
    $node->status = 1;
  }
  if(_anonymous_subscriptions_should_send_workbench($node)) {
    _anonymous_subscriptions_add_pending_emails($node);
  }
}

/**
 * Function used to determine whether the email should be sent
 * to the subscribers form workbench.
 *
 * This will check the status of the node currently and compare
 * it to the original one.
 *
 * @param $node
 *  The node object that specifies to the email
 *
 * @return bool
 *  returns true or false depending if an email should be sent
 */
function _anonymous_subscriptions_should_send_workbench($node) {
  $type = $node->type;
  $original = array();
  if(isset($node->original)) {
    $original = $node->original;
  }
  $valid_types = variable_get(ANONYMOUS_SUBSCRIPTIONS_VALID_TYPES, array());
  if(in_array($type, $valid_types) && $node->status == 1 && isset($node->send_emails) &&
    $node->send_emails == 1 && (empty($original) || $original->status == 0)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Function used to determine whether the email should be sent
 * to the subscribers.
 *
 * This will check the status of the node currently and compare
 * it to the original one.
 *
 * @param $node
 *  The node object that specifies to the email
 *
 * @return bool
 *  returns true or false depending if an email should be sent
 */
function _anonymous_subscriptions_should_send($node) {
  $type = $node->type;
  $original = array();
  if(isset($node->original)) {
    $original = $node->original;
  }
  $valid_types = variable_get(ANONYMOUS_SUBSCRIPTIONS_VALID_TYPES, array());
  if(in_array($type, $valid_types) && $node->status == 1 && isset($node->send_emails) &&
    $node->send_emails == 1 && (empty($original) || $original->status == 0)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Function used to add pending emails to be sent to the database
 * so they can be processed via cron at a later time.
 *
 * @param $node
 *  The node object that specifies to the email
 */
function _anonymous_subscriptions_add_pending_emails($node) {
  global $base_url;
  $original_base_url = $base_url;
  $result = db_select(ANONYMOUS_SUBSCRIPTIONS_TABLE, 'e')
    ->fields('e', array('email', 'code'))
    ->condition('verified', 1,'=')
    ->execute()
    ->fetchAll();

  $new_base_url = variable_get('anonymous_subscriptions_site_url', '[site:url]');
  $new_base_url = token_replace($new_base_url);
  $base_url = $new_base_url;

  $queue = DrupalQueue::get(ANONYMOUS_SUBSCRIPTIONS_QUEUE_NAME);

  $original_subject = variable_get('anonymous_subscriptions_subject_text', 'New content added to [site:name]');
  $original_body = variable_get('anonymous_subscriptions_body_text', "A new post has been made to [site:name].\nPlease visit [node:url] to see this new post!");

  $count = 0;
  foreach ($result as $email) {
    $body = $original_body;
    $body .= t("\n\nTo unsubscribe please visit !url", ['!url' => url("subscription/$email->code/$email->email/unsubscribe", ['absolute' => TRUE])]);

    $subject = token_replace($original_subject, array('node' => $node));
    $body = token_replace($body, array('node' => $node));

    $fields = array(
      'email' => $email->email,
      'subject' => $subject,
      'body' => array($body),
      'nid' => $node->nid,
    );

    $queue->createItem($fields);
    $log_text = t("Adding pending email to !email with subject !subject for nid !nid", ['!email' => $fields['email'], '!subject' => $fields['subject'], '!nid' => $fields['nid']]);
    watchdog(ANONYMOUS_SUBSCRIPTIONS_MODULE_NAME, $log_text, NULL, WATCHDOG_INFO, NULL);
    $count++;
  }

  // Setting base URL back to the original as to ensure we get the correct url (after token replacing etc)
  // for our $site_url variable, e.g. if node:url is used we want the correct base_url
  $base_url = $original_base_url;
  if($count > 0) {
    $message = t("Queuing $count emails to be sent to your subscribers. <a href='!url'>Click here to remove pending emails</a>.", ['!url' => "/subscription/$node->nid/remove?tok=".drupal_get_token()]);
  } else {
    $message = t("No emails to be sent, there are no subscribers.");
  }
  drupal_set_message($message);

  //_anonymous_subscriptions_process_queue();
}

/*
 * Implements hook_cron_queue_info().
 */
function anonymous_subscriptions_cron_queue_info(){
  $queues[ANONYMOUS_SUBSCRIPTIONS_QUEUE_NAME] = array(
    'worker callback' => '_anonymous_subscriptions_process_queue',
    'time' => variable_get('anonymous_subscriptions_max_to_send', 60),
  );
  return $queues;
}

/**
 *
 * This will collect the selected number of emails to be sent at any one
 * time and perform this on cron run.
 */
function _anonymous_subscriptions_process_queue($data) {
  $email = $data;
    // Log some information in case we need to verify that an email was sent then send the email.
  $log_text = t("Sending emails to !email with subject !subject", ['!email' => $email['email'], '!subject' => $email['subject']]);
  watchdog(ANONYMOUS_SUBSCRIPTIONS_MODULE_NAME, $log_text, NULL, WATCHDOG_INFO, NULL);
  drupal_mail('anonymous_subscriptions', 'anonymous_subscriptions_key', $email['email'], language_default(), $email);

  return TRUE;
}

/**
 * Implements hook_mail()
 */
function anonymous_subscriptions_mail($key, &$message, $params) {
  switch ($key) {
    case 'anonymous_subscriptions_key':
      // Set headers etc
      $message['to'] = $params['email'];
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      break;
  }
}

/**
 * Implements hook_theme().
 */
function anonymous_subscriptions_theme() {
  $theme = array();
  $theme['anonymous_subscriptions_message'] = array(
    'variables' => array('renderer' => NULL, 'region' => NULL, 'content_type' => NULL),
    'path' => drupal_get_path('module', 'anonymous_subscriptions') . '/templates',
    'file' => '../includes/anonymous_subscriptions.message.inc',
    'template' => 'anonymous-subscriptions-message',
  );

  return $theme;
}

/**
 *  Implementation of hook_views_api().
 */
function anonymous_subscriptions_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'anonymous_subscriptions') . '/views',
  );
}

/**
 * Implements hook_views_default_views().
 */
function anonymous_subscriptions_views_default_views() {
  $path = drupal_get_path('module', 'anonymous_subscriptions') . '/views/default_views/*.inc';
  $views = array();
  foreach (glob($path) as $views_filename) {
    require_once($views_filename);
  }
  return $views;
}

/**
 * Implements hook_module_implements_alter().
 */
function anonymous_subscriptions_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'node_insert') {
    // Move anonymous_subscriptions_node_insert() to the end of the list.
    $group = $implementations['anonymous_subscriptions'];
    unset($implementations['anonymous_subscriptions']);
    $implementations['anonymous_subscriptions'] = $group;
  }
}
